/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zadania;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Robert
 */
public class MainWindow extends javax.swing.JFrame {
    
    private static final String DELETE_COLUMN_NAME = "Usuń";
    private static final String DONE_COLUMN_NAME = "Zrobione";
    private static final int MAX_COLUMN_SIZE = 300;
    
    private final String login;
    private DefaultTableModel dtmUserTasks;
    private DefaultTableModel dtmAllTasks;

    private final JButton renderButton;
    private final JButton editButtonDelete;
    private final JButton editButtonDone;
    /**
     * Creates new form MainWindow
     * @param login Login name of the user that logged in to application
     */
    public MainWindow(String login) {
        initComponents();
        this.login=login;
        renderButton = new JButton();
        editButtonDelete = new JButton();
        editButtonDelete.addActionListener(new JTableDeleteButtonListener());
        editButtonDone = new JButton();
        editButtonDone.addActionListener(new JTableDoneButtonListener());        
        initTableModels();
        initUserFullName();
        jTable1.setModel(getCurrentModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Jesteś zalogowany jako:");

        jToggleButton1.setText("Wyświetlaj wszystkie zadania");
        jToggleButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton1ItemStateChanged(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Dodaj zadanie");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(13, 13, 13)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 128, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButton1ItemStateChanged
        initTableModels();   
    }//GEN-LAST:event_jToggleButton1ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DBConnection.getDBConnection().addTask();
        initTableModels();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private void initUserFullName() {
        String fullName = DBConnection.getDBConnection().getUserFullName(login);
        jLabel2.setText(fullName);
    }
    private DefaultTableModel getTableModel(String login) {
        DefaultTableModel dtm = new DefaultTableModel();

        DBConnection.getDBConnection().prepareTableDataFromDatabase(dtm, login);
                        
        return dtm;
    }
    private void initTableModels() {
        dtmUserTasks=getTableModel(login);
        dtmAllTasks=getTableModel(null);

        addColumnToTableModel(dtmUserTasks,DELETE_COLUMN_NAME);
        addColumnToTableModel(dtmAllTasks,DELETE_COLUMN_NAME);
        addColumnToTableModel(dtmUserTasks,DONE_COLUMN_NAME);
        addColumnToTableModel(dtmAllTasks,DONE_COLUMN_NAME);
        
        setJTableParams();
    }
    private void setJTableParams() {
        jTable1.setModel(getCurrentModel());
        
        jTable1.getColumn(DELETE_COLUMN_NAME).setCellRenderer(new JTableButtonRenderer()); 
        jTable1.getColumn(DELETE_COLUMN_NAME).setCellEditor(new JTableButtonEditor(editButtonDelete));
        jTable1.getColumn(DONE_COLUMN_NAME).setCellRenderer(new JTableButtonRenderer()); 
        jTable1.getColumn(DONE_COLUMN_NAME).setCellEditor(new JTableButtonEditor(editButtonDone));       
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        resizeColumnWidth();
    }

    private void addColumnToTableModel(DefaultTableModel dtm,String columnName) {
        int rowsNo=dtm.getRowCount();
        Object[] o = new Object[rowsNo];
        for (int i=0;i<rowsNo;i++) {
            o[i]=columnName;
        }
        dtm.addColumn(columnName , o) ;    
    }


    private DefaultTableModel getCurrentModel() {
        if (jToggleButton1.isSelected())
            return dtmAllTasks;
        else 
            return dtmUserTasks;
    }

    private void resizeColumnWidth() {
        final TableColumnModel columnModel = jTable1.getColumnModel();
        
        for (int column = 0; column < jTable1.getColumnCount(); column++) {
            TableCellRenderer headerRenderer = jTable1.getTableHeader().getDefaultRenderer();
            Component component = headerRenderer.getTableCellRendererComponent(jTable1,columnModel.getColumn(column).getHeaderValue(),false,false,-1,column);
            int width=component.getPreferredSize().width+1;
            for (int row = 0; row < jTable1.getRowCount(); row++) {
                TableCellRenderer renderer = jTable1.getCellRenderer(row, column);
                Component comp = jTable1.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width +1 , width);
            }
            if(width > MAX_COLUMN_SIZE)
                width=MAX_COLUMN_SIZE;
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }  
     
    private class JTableDeleteButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int row = jTable1.convertRowIndexToModel(jTable1.getEditingRow());
            int id = (int) getCurrentModel().getValueAt(row, 0);
            ((DefaultTableModel) getCurrentModel()).removeRow(row);
            DBConnection.getDBConnection().deleteTask(id);
            initTableModels();
        }
    }
    
    private class JTableDoneButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int row = jTable1.convertRowIndexToModel(jTable1.getEditingRow());
            int id = (int) getCurrentModel().getValueAt(row, 0);
            ((DefaultTableModel) getCurrentModel()).removeRow(row);
            DBConnection.getDBConnection().updateTask(id);
            initTableModels();
        }
    }    
    
    private class JTableButtonRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                renderButton.setForeground(table.getSelectionForeground());
                renderButton.setBackground(table.getSelectionBackground());
            } else {
                renderButton.setForeground(table.getForeground());
                renderButton.setBackground(UIManager.getColor("Button.background"));
            }

            if (hasFocus) {
                renderButton.setBorder( new LineBorder(Color.BLUE) );
            } else {
                renderButton.setBorder( editButtonDelete.getBorder() );
            }

            if (value == null) {
                renderButton.setText( "" );
                renderButton.setIcon( null );
            } else {
                renderButton.setText( value.toString() );
                renderButton.setIcon( null );
            }

            return renderButton;
	}
    }  
    
    private class JTableButtonEditor extends AbstractCellEditor implements TableCellEditor {
        
        private Object editorValue;
        private final JButton button;
        
        JTableButtonEditor(JButton button) {
            this.button=button;
        }
        
         @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            if (value == null) {
                button.setText( "" );
                button.setIcon( null );
            } else {
                button.setText( value.toString() );
                button.setIcon( null );
            }
            this.editorValue = value;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return editorValue;
        }
    }
}

